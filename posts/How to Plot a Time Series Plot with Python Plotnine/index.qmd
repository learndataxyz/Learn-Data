---
title: "How to Plot a Time Series Plot with Python Plotnine" 
author: Adejumo Ridwan Suleiman 
categories: [python, data visualization, plotnine, time series] 
image: "3.png"
draft: false
external: "https://google.com"
---

![](3.png)

When you have data with observations in subsequent time intervals, such as hourly, daily, weekly, or yearly.

Visualizing such data enables you to identify trends and seasonality over time and forecast future values.

In this article, you will learn how to use [Python Plotnine](https://plotnine.org/), a Python library based on ggplot2 that allows you to build plots based on the grammar of graphics.

## **Prerequisites**

-   [Google Colab](https://colab.google/), [Jupyter Notebook](https://jupyter.org/), or [Positron](https://positron.posit.co/) installed
-   The following libraries were installed:
    -   `scikit-misc` - Miscellaneous scientific algorithms
    -   `numpy` - Numerical computing
    -   `pandas` - Data Analysis
    -   [`plotnine`](https://plotnine.org/) - Data visualization based on the grammar of graphics

## **Preparing the Data**

Before you proceed, you need to download and prepare the data for the time series visualization. In this tutorial, you will make use of the daily [Netflix stock price data](https://www.kaggle.com/datasets/kalilurrahman/netflix-stock-data-live-and-latest) from the year 2000 to date.

First of all, import the following libraries

``` python
import scikit_misc
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from plotnine import (
    ggplot, aes, geom_line, geom_point, geom_smooth,
    labs, theme_minimal, theme, scale_x_datetime,
    element_text, element_blank
)
```

Import the data.

``` python
df = pd.read_csv('/content/Netflix_stock_history.csv')
df.head()
```

![Netflix stock history. Image by author.](image.png)


Ensure the `Date` column is in `datetime` format.

``` python
df['Date'] = pd.to_datetime(df['Date'], utc=True)
```

You can resample the data to any preferred frequency; either weekly, monthly, or yearly.

For weekly frequency,

``` python
# Weekly aggregation 
df_weekly = df.set_index('Date').groupby([pd.Grouper(freq='W')]).agg({
    'Close': 'mean'
}).reset_index()

df_weekly.head()
```

![Weekly frequency. Image by Author.](image%201.png)


For monthly,

``` python
# Monthly aggregation
df_monthly = df.set_index('Date').groupby([pd.Grouper(freq='M')]).agg({
    'Close': 'mean'
}).reset_index()

df_monthly.head()
```

![Monthly frequency. Image by Author.](image%202.png)


For yearly,

``` python
# Yearly aggregation
df_yearly = df.set_index('Date').groupby([pd.Grouper(freq='Y')]).agg({
    'Close': 'mean'
}).reset_index()

df_yearly.head()
```

![Yearly frequency. Image by Author.](image%203.png)


## **Creating a Basic Time Series Plot**

If you have used `ggplot2` , you should not find it difficult to grasp `plotnine`. They both work using the same principle: *The Grammar of Graphics.*

The grammar of graphics works by adding layers to elements to build a plot.

Here is a basic example using our data to plot a line plot.

``` python
basic_plot = (
    ggplot(df) +
    aes(x='Date', y='Close') +
    geom_line()
)

basic_plot
```

![Line plot showing Netflix closing stock price history. Image by Author.](image%204.png)


First of all, you specify your dataset inside the `ggplot()` function, then add the axis in the `aes()` function to it, then finally the `geom_line()` function to create a line plot.

All these are layers, and you can add more to your plot using the `+` sign.

``` python
styled_plot = (
    ggplot(df) +
    aes(x='Date', y='Close') +
    geom_line(color='steelblue', size=1.2, linetype='solid')
)
styled_plot
```

The `geom_line()` has arguments where you can specify the `color`, `size`, and `linetype` of your plot.

![Color the line. Image by Author.](image%205.png)


## **Enhancing the Plot**

If your dataset has multiple categories, you can add it to the `color` argument in the `aes()` function.

Though, we donâ€™t have a category in our dataset, we will make do of the closing prices as a category for demonstration purposes.

``` python
multi_category_plot = (
    ggplot(df) +
    aes(x='Date', y='Close', color='Close') +
    geom_line(size=1)
)

multi_category_plot
```

![Add colors to your line plot. Image by Author.](image%206.png)


You can use the `labs()` function to add titles and axes labels to your plots.

``` python
enhanced_plot = (
    ggplot(df) +
    aes(x='Date', y='Close', color='Close') +
    geom_line(size=1.2) +
    labs(
        title='Time Series Analysis with Plotnine',
        subtitle='Netflix closing values from 2020-Date with trend and seasonality',
        x='Date',
        y='Close',
        color='Close'
    ) 
)
enhanced_plot
```

![Add title and axis labels. Image by author.](image%207.png)


You can also add a smoothing line to show the trend on the plot.

``` python
advanced_plot = (
    ggplot(df) +
    aes(x='Date', y='Close', color='Close') +
    geom_line(alpha=0.6, size=0.8) +  # Semi-transparent lines
    geom_smooth(method='loess', se=True, alpha=0.2) +  # Smoothing with confidence interval
    labs(
        title='Advanced Time Series with Trend Lines',
        subtitle='Original data with LOESS smoothing and confidence intervals',
        x='Date',
        y='Close',
        color='Close'
    ) +
    theme_minimal() +
    theme(
        panel_grid_minor=element_blank(),  # Remove minor grid lines
        legend_position='bottom',
        plot_title=element_text(size=14, face='bold')
    )
)

advanced_plot
```

![Add a smoothing line to the plot. Image by Author.](image%208.png)


## **Conclusion**

Unlike other Python visualization libraries, plotnine brings an elegant way of building visualizations using the grammar of graphics, where you build visualizations layer upon layers. You first of all prepare your data, then your plot, then you customize, and finally, enhance your plot.

You can go beyond this and explore various other types of visualizations in plotnine, and also further way to customize your plot.

### **Need Help with Data? Letâ€™s Make It Simple.**

*At **LearnData.xyz**, weâ€™re here to help you solve tough data challenges and make sense of your numbers. Whether you need custom data science solutions or hands-on training to upskill your team, weâ€™ve got your back.*

*ðŸ“§ Shoot us an email at **admin\@learndata.xyz**â€”letâ€™s chat about how we can help you make smarter decisions with your data.*

## Your next breakthrough could be one email away. Letâ€™s make it happen!
